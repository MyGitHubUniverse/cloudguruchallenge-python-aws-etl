# https://learn.hashicorp.com/tutorials/terraform/github-actions

name: 'CGC-python-etl'

on:
  push:
    paths-ignore:
      - '*.md'
      - 'images/**'
      - '.github/**' # Doesn't actually ignore for some reason
    branches:
      - master
  pull_request:


# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
defaults:
  run:
    shell: bash


jobs:
  check:
    runs-on: ubuntu-latest
    name: Check changed files
    outputs:
      run_terraform_job: ${{ steps.check_files.outputs.run_terraform_job }}
      run_serverless_job: ${{ steps.check_files.outputs.run_serverless_job }}
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Check files for changes in Terraform folder or other folders
      id: check_files
      run: |
        echo "=============== list changed files ==============="
        git diff --name-only HEAD^ HEAD

        echo "========== check paths of changed files =========="
        git diff --name-only HEAD^ HEAD > files.txt
        while IFS= read -r file
        do
          echo $file
          if [ -s $file ]; then
            if [[ $file == .github/* ]]; then
              echo "Ignoring .github/workflows folder"
              echo "::set-output name=run_terraform_job::false"
              echo "::set-output name=run_serverless_job::false"
            elif [[ $file == terraform/* ]]; then
              echo "This file is under 'terraform' folder..so terraform code should be run"
              echo "::set-output name=run_terraform_job::true"
              break
            else
              echo "Setting serverless job to true"
              echo "::set-output name=run_serverless_job::true"
            fi
          else
            echo "No files were changed, exiting!"
            echo "::set-output name=run_terraform_job::false"
            echo "::set-output name=run_serverless_job::false"
          fi
        done < files.txt


  terraform_job:
    runs-on: ubuntu-latest
    name: Terraform job
    defaults:
      run:
        shell: bash
        working-directory: terraform #This is important!!!!!!!!
    needs: check
    if: needs.check.outputs.run_terraform_job == 'true'
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        env:
          TF_IN_AUTOMATION: true
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 0.12.29

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        run: terraform init

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      # Update Pull request with Terraform plan output
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `<details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })


      # Exit if Terraform plan fails
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # On push to master branch, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve


  serverless_job:
    runs-on: ubuntu-latest
    name: Serverless/lambda job
    needs: [check, terraform_job]
    if: always() && needs.check.outputs.run_serverless_job == 'true'
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Create the lambda python packages folder
      - name: Run lambda container
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        uses: docker://lambci/lambda:build-python3.7
        with:
          args: /bin/sh -c "mkdir layers/python && pip install -r layers/requirements.txt -t layers/python && ls layers/python"

      # Setup serverless and deploy serverless code
      - name: Serverless
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        uses: serverless/github-action@master
        with:
          args: -c "serverless plugin install --name serverless-iam-roles-per-function && serverless deploy -v"
          entrypoint: /bin/sh
        env:
          # AWS environment variables are for use by serverless
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

#      # Make Github actions sleep for 10 seconds while serverless deploy completes
#      - name: Sleep for 10s
#        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
#        uses: jakejarvis/wait-action@master
#        with:
#          time: '10s'